from had.cfn import Template

class MyTemplate(Template):
  CloudFront = """\
  CloudFrontOriginRequestPolicy:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::CloudFront::OriginRequestPolicy"
    DeletionPolicy: "Delete"
    Properties:
      OriginRequestPolicyConfig:
        QueryStringsConfig:
          QueryStringBehavior: "all"
        Comment: "Policy to forward all parameters in viewer requests except for the Host header"
        HeadersConfig:
          HeaderBehavior: "allExcept"
          Headers:
          - "host"
        CookiesConfig:
          CookieBehavior: "all"
        Name: "{OriginRequestPolicyName}"
  CloudFrontCachePolicyCachingDiasabled:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::CloudFront::CachePolicy"
    DeletionPolicy: "Delete"
    Properties:
      CachePolicyConfig:
        Comment: "Policy with caching disabled"
        MinTTL: 0
        MaxTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "none"
          EnableAcceptEncodingBrotli: false
          HeadersConfig:
            HeaderBehavior: "none"
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingGzip: false
        DefaultTTL: 0
        Name: "CachePolicy-wiki-stg-CachingDisabled"
  CloudFrontCachePolicyCachingOptimized:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::CloudFront::CachePolicy"
    DeletionPolicy: "Delete"
    Properties:
      CachePolicyConfig:
        Comment: "Policy with caching enabled. Supports Gzip and Brotli compression."
        MinTTL: 1
        MaxTTL: 3.1536E7
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "none"
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: "none"
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingGzip: true
        DefaultTTL: 86400
        Name: "CachePolicy-wiki-stg-CachingOptimized"
  CloudFrontDistributionWikiProjectStg:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::CloudFront::Distribution"
    DeletionPolicy: "Delete"
    Properties:
      DistributionConfig:
        Logging:
          IncludeCookies: false
          Bucket: ""
          Prefix: ""
        Comment: ""
        DefaultRootObject: ""
        Origins:
        - ConnectionTimeout: 10
          OriginAccessControlId: ""
          ConnectionAttempts: 3
          DomainName: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          OriginShield:
            Enabled: false
          OriginPath: "/stage-01"
          Id: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          CustomOriginConfig:
            OriginKeepaliveTimeout: 5
            OriginReadTimeout: 30
            OriginSSLProtocols:
            - "TLSv1.2"
            HTTPSPort: 443
            HTTPPort: 80
            OriginProtocolPolicy: "https-only"
        - ConnectionTimeout: 10
          OriginAccessControlId: ""
          ConnectionAttempts: 3
          DomainName: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          OriginShield:
            Enabled: false
          OriginPath: "/stage-01"
          Id: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          CustomOriginConfig:
            OriginKeepaliveTimeout: 5
            OriginReadTimeout: 30
            OriginSSLProtocols:
            - "TLSv1.2"
            HTTPSPort: 443
            HTTPPort: 80
            OriginProtocolPolicy: "https-only"
        - ConnectionTimeout: 10
          OriginAccessControlId:
            Ref: "CloudFrontOriginAccessControl"
          ConnectionAttempts: 3
          OriginCustomHeaders: []
          DomainName: "{S3_BUCKET}.s3.{region}.amazonaws.com"
          OriginShield:
            Enabled: false
          S3OriginConfig:
            OriginAccessIdentity: ""
          OriginPath: "/had/CloudFront"
          Id: "{S3_BUCKET}.s3.{region}.amazonaws.com"
        ViewerCertificate:
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
          AcmCertificateArn: "{ACM_ARN}"
        PriceClass: "PriceClass_All"
        DefaultCacheBehavior:
          Compress: true
          TrustedKeyGroups: []
          FunctionAssociations: []
          AllowedMethods:
          - "HEAD"
          - "DELETE"
          - "POST"
          - "GET"
          - "OPTIONS"
          - "PUT"
          - "PATCH"
          CachedMethods:
          - "HEAD"
          - "GET"
          LambdaFunctionAssociations: []
          SmoothStreaming: false
          TargetOriginId: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId:
            Ref: "CloudFrontCachePolicyCachingDiasabled"
          OriginRequestPolicyId:
            Ref: "CloudFrontOriginRequestPolicy"
          TrustedSigners: []
          FieldLevelEncryptionId: ""
        Staging: false
        CustomErrorResponses: []
        ContinuousDeploymentPolicyId: ""
        OriginGroups:
          Quantity: 0
          Items: []
        Enabled: true
        Aliases:
        - "wiki.h-akira.net"
        IPV6Enabled: true
        WebACLId: ""
        HttpVersion: "http2and3"
        Restrictions:
          GeoRestriction:
            Locations: []
            RestrictionType: "none"
        CacheBehaviors:
        - Compress: true
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          TargetOriginId: "{S3_BUCKET}.s3.{region}.amazonaws.com"
          ViewerProtocolPolicy: "redirect-to-https"
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
          - "HEAD"
          - "GET"
          PathPattern: "/favicon.ico"
          CachedMethods:
          - "HEAD"
          - "GET"
          SmoothStreaming: false
          CachePolicyId:
            Ref: "CloudFrontCachePolicyCachingOptimized"
        - Compress: true
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          TargetOriginId: "{S3_BUCKET}.s3.{region}.amazonaws.com"
          ViewerProtocolPolicy: "redirect-to-https"
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
          - "HEAD"
          - "GET"
          PathPattern: "/static/*"
          CachedMethods:
          - "HEAD"
          - "GET"
          SmoothStreaming: false
          CachePolicyId:
            Ref: "CloudFrontCachePolicyCachingOptimized"
        - Compress: true
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          TargetOriginId: !Sub
            "${{MyApiGateway{apigw_index}}}.execute-api.{region}.amazonaws.com"
          ViewerProtocolPolicy: "redirect-to-https"
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
          - "HEAD"
          - "DELETE"
          - "POST"
          - "GET"
          - "OPTIONS"
          - "PUT"
          - "PATCH"
          CachedMethods:
          - "HEAD"
          - "GET"
          PathPattern: "/storage/*"
          SmoothStreaming: false
          CachePolicyId:
            Ref: "CloudFrontCachePolicyCachingDiasabled"
          OriginRequestPolicyId:
            Ref: "CloudFrontOriginRequestPolicy"
  CloudFrontOriginAccessControl:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::CloudFront::OriginAccessControl"
    DeletionPolicy: "Delete"
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: "always"
        Description: ""
        SigningProtocol: "sigv4"
        OriginAccessControlOriginType: "s3"
        Name: "{OriginAccessControlName}"
"""
  def gen_kwargw_CloudFront(self):
    kwargs = {
      "apigw_index": self.apigw2index(self.settings.AWS["API"]["gateways"][0]["name"]),
      "OriginAccessControlName": self.settings.AWS["CloudFront"]["OriginAccessControl"]["name"],
      "OriginRequestPolicyName": self.settings.AWS["CloudFront"]["OriginRequestPolicy"]["name"],
      "S3_BUCKET": self.settings.AWS["S3"]["bucket"],
      "ACM_ARN": self.settings.AWS["ACM"]["arn"],
      "region": self.settings.AWS["region"]
    }
    return kwargs
  def add_CloudFront(self):
    kwargs = self.gen_kwargw_CloudFront()
    self.YAML += self.CloudFront.format(**kwargs)
  def __init__(self, settings_json_path, versions=None):
    super().__init__(settings_json_path, versions)
    self.add_CloudFront()


