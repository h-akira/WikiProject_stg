from had.shourtcuts import render, redirect, error_render
from project import settings
from project.shourtcuts import reverse_for_slug
import random
from project.tree import Tree, gen_tree_htmls  # , gen_pages_ordered_by_tree
try:
  import boto3
  from botocore.exceptions import ClientError
  from boto3.dynamodb.conditions import Key, Attr
except ModuleNotFoundError:
  pass
import traceback
from .forms import PageForm
import markdown
import datetime

table_name = "table-wiki-stg"

# def _checkbox2bool(value):
#   if value=="on":
#     return True
#   elif value is None:
#     return False
#   else:
#     raise ValueError("Invalid value")

def index(request):
  context = {
    "nav_tree_htmls": gen_tree_htmls(request, table_name, a_white=True)
  }
  return render(request, 'wiki/index.html', context)

def create(request):
  if request.method == "POST":
    action = request.body["action"]
    if "." in request.body["slug"]:
      return error_render(request, "Invalid slug. Do not use '.' in slug.")
    form = PageForm(**request.body)
    Item = form.data
    Item["username"] = request.username
    Item["last_updated"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    table = boto3.resource('dynamodb').Table(table_name)
    try:
      response = table.put_item(
        Item=Item,
        ConditionExpression="attribute_not_exists(username) AND attribute_not_exists(slug)"
      )
      return error_render(request, response)
    except ClientError as e:
      if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
        error_message = "Item with the same partition key and sort key already exists."
      else:
        error_message = traceback.format_exc()
      form = PageForm(data=Item)
      context = {
        "nav_tree_htmls": gen_tree_htmls(request, table_name, a_white=True),
        "share_edit": False,
        "type": "create",
        "share_code": Item["share_code"],
        "author": True, 
        "form": form,
        "error_message": error_message
      }
      return render(request, 'wiki/edit.html', context)
  else:
    allow="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    length=32
    share_code = ''.join(random.choice(allow) for i in range(length))
    initial = {
      "share_code": share_code,
      "priority": 0,
    }
    form = PageForm(data=initial)
    context = {
      "share_edit": False,
      "type": "create",
      "share_code": share_code,
      "author": True, 
      "form": form,
      "error_message": None
      # "nav_tree_htmls":gen_tree_htmls(request, User, PageTable, a_white=True)
    }
    return render(request, 'wiki/edit.html', context)


# def edit(request, username, **kwargs):
#   slug_list = []
#   if len(kwargs) == 0:
#     return error_render(request, "Slug is empty.")
#   for i in range(1,6):
#     if f"slug{i}" in kwargs:
#       slug_list.append(kwargs[f"slug{i}"])
#     else:
#       break
#   slug = "/".join(slug_list)
#   table = boto3.resource('dynamodb').Table(table_name)
#   if request.method == "POST":
#     pass
#   else:
#     initial = {
#       "share_code": share_code,
#       "priority": 0,
#     }
#     form = PageForm(data=initial)
#     context = {
#       "share_edit": False,
#       "type": "create",
#       "share_code": share_code,
#       "author": True, 
#       "form": form,
#       "error_message": None
#       # "nav_tree_htmls":gen_tree_htmls(request, User, PageTable, a_white=True)
#     }
#
#   
#
#
#   response = table.query(
#     KeyConditionExpression=Key('username').eq(username) & Key('slug').eq(slug)
#   )
#   return _render_detail(request, response, from_share_code=False)
#
# def _render_edit(request, response, from_share_code=False):


def detail(request, username, **kwargs):
  slug_list = []
  if len(kwargs) == 0:
    return error_render(request, "Slug is empty.")
  for i in range(1,6):
    if f"slug{i}" in kwargs:
      slug_list.append(kwargs[f"slug{i}"])
    else:
      break
  slug = "/".join(slug_list)
  table = boto3.resource('dynamodb').Table(table_name)
  response = table.get_item(
    Key={
      'username': username,
      'slug': slug
      }
  )
  if "Item" not in response:
    context = {
      "nav_tree_htmls": gen_tree_htmls(request, table_name, a_white=True),
      "message": "Page not found."
    }
    return render(request, 'wiki/not_found.html', context=context)
  else:
    return _render_detail(request, response["Item"], from_share_code=False)

def share_detail(request, share_code):
  table = boto3.resource('dynamodb').Table(table_name)
  response = table.query(
    IndexName="ShareCodeIndex",
    KeyConditionExpression=Key('share_code').eq(share_code)
  )
  if response["Count"] == 0:
    context = {
      "nav_tree_htmls": gen_tree_htmls(request, table_name, a_white=True),
      "message": "Page not found."
    }
    return render(request, 'wiki/not_found.html', context=context)
  elif response["Count"] > 1:
    return error_render(request, "Duplicate page.")
  else:
    return _render_detail(request, response["Items"][0], from_share_code=True)

def _render_detail(request, item, from_share_code=False):
  if from_share_code and not item["share"]:
    return error_render(request, "Page not found.")
  elif not from_share_code and not item["public"] and item["username"] != request.username:
    return error_render(request, "Page not found.")
  # return error_render(request, item)
  md = markdown.Markdown()
  # return error_render(request, f'{item["text"]} \n\n {item["text"].encode("shift-jis").decode("utf-8", errors="ignore")}')
  # return error_render(request, md.convert(item["text"]))
  context = {
    "nav_tree_htmls": gen_tree_htmls(request, table_name, a_white=True),
    "item": item,
    "from_share_code": from_share_code,
    "markdown": md.convert(item["text"])
  }
  return render(request, 'wiki/detail.html', context)



# def sample(request):
#   # cookie = request["event"]["headers"].get("cookie", "")
#   cookie = request.event["headers"]
#   return render(request, 'test_app/index.html', context={'test_message': str(cookie), 'html_test': "<h3>hogehoge</h3>"})
#
# def sample2(request, id):
#   return render(
#     request, 'test_app/arg_sample.html', context={
#       'test_message': 'This is a pen.', 
#       'id':id
#     }
#   )
