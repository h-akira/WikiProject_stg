from had.shourtcuts import render, redirect, error_render
from project import settings
import random
from tree import Tree, gen_tree_htmls  # , gen_pages_ordered_by_tree
try:
  import boto3
  from botocore.exceptions import ClientError
  from boto3.dynamodb.conditions import Key, Attr
except ModuleNotFoundError:
  pass
import traceback
from .forms import PageForm
import markdown

table_name = "table-wiki-stg"

# def _checkbox2bool(value):
#   if value=="on":
#     return True
#   elif value is None:
#     return False
#   else:
#     raise ValueError("Invalid value")

def index(request):
  context = {}
  return render(request, 'wiki/index.html', context)

def create(request):
  if request.method == "POST":
    action = request.body["action"]
    if "." in request.body["slug"]:
      return error_render(request, "Invalid slug. Do not use '.' in slug.")
    form = PageForm(**request.body)
    Item = form.data
    Item["username"] = request.username
    table = boto3.resource('dynamodb').Table(table_name)
    try:
      response = table.put_item(
        Item=Item,
        ConditionExpression="attribute_not_exists(username) AND attribute_not_exists(slug)"
      )
      return error_render(request, response)
    except ClientError as e:
      if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
        error_message = "Item with the same partition key and sort key already exists."
      else:
        error_message = traceback.format_exc()
      form = PageForm(data=Item)
      context = {
        "share_edit": False,
        "type": "create",
        "share_code": Item["share_code"],
        "author": True, 
        "form": form,
        "error_message": error_message
      }
      return render(request, 'wiki/edit.html', context)
  else:
    allow="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    length=32
    share_code = ''.join(random.choice(allow) for i in range(length))
    initial = {
      "share_code": share_code,
      "priority": 0,
    }
    form = PageForm(data=initial)
    context = {
      "share_edit": False,
      "type": "create",
      "share_code": share_code,
      "author": True, 
      "form": form,
      "error_message": None
      # "nav_tree_htmls":gen_tree_htmls(request, User, PageTable, a_white=True)
    }
    return render(request, 'wiki/edit.html', context)

def detail(request, username, slug):
  slug = slug.replace(".", "/")
  table = boto3.resource('dynamodb').Table(table_name)
  response = table.query(
    KeyConditionExpression=Key('username').eq(username) & Key('slug').eq(slug)
  )
  return _render_detail(request, response)

def _render_detail(request, response, from_share_code=False):
  if response["Count"] == 0:
    return error_render(request, "Page not found.")
  elif response["Count"] > 1:
    return error_render(request, "Duplicate page.")
  else:
    item = response["Items"][0]
    if from_share_code and not item["share"]:
      return error_render(request, "Page not found.")
    elif not from_share_code and not item["public"] and item["username"] != request.username:
      return error_render(request, "Page not found.")
    # return error_render(request, item)
    md = markdown.Markdown()
    # return error_render(request, f'{item["text"]} \n\n {item["text"].encode("shift-jis").decode("utf-8", errors="ignore")}')
    # return error_render(request, md.convert(item["text"]))
    context = {
      "item": item,
      "from_share_code": from_share_code,
      "markdown": md.convert(item["text"])
    }
    return render(request, 'wiki/detail.html', context)



# def sample(request):
#   # cookie = request["event"]["headers"].get("cookie", "")
#   cookie = request.event["headers"]
#   return render(request, 'test_app/index.html', context={'test_message': str(cookie), 'html_test': "<h3>hogehoge</h3>"})
#
# def sample2(request, id):
#   return render(
#     request, 'test_app/arg_sample.html', context={
#       'test_message': 'This is a pen.', 
#       'id':id
#     }
#   )
