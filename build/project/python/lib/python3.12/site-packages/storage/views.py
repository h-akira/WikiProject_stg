from had.shourtcuts import render, redirect, error_render, RenderSettings, json_render, image_render
from project import settings
# from project.shourtcuts import redirect_for_slug, reverse_for_slug
# import random
# try:
#   import boto3
#   from botocore.exceptions import ClientError
#   from boto3.dynamodb.conditions import Key, Attr
# except ModuleNotFoundError:
#   pass
# import traceback
import base64
import os
# import io
# import cgi
import random
import datetime
import logging
import json
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def get(request, username, name):
  # 参考
  # https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/lambda-proxy-binary-media.html
  # バイナリメディアタイプを"*/*"にしなければならない
  import boto3
  s3_client = boto3.client('s3')
  bucket_name = settings.AWS["S3"]["bucket"]
  try:
    response = s3_client.get_object(
      Bucket=bucket_name,
      Key=os.path.join(f"had/storage/{username}", name), 
    )
  except:
    return json_render(request, {"message": "file is not exists"}, code=500)
  logger.info(f"response keys: {response.keys()}")
  logger.info(response)
  image = response['Body'].read()
  image_body=base64.b64encode(image)
  logger.info(f"image_body: {image_body}")
  content_type=response['ContentType']
  logger.info(f"context_type: {content_type}")
  return image_render(
    request, 
    image_body=image_body,
    content_type=content_type,
    isBase64Encoded=True
  )

def post(request, username):
  if not request.auth or request.username != username:
    logger.info("permission denied")
    return json_render(request, {"message": "permission denied"}, code=400)
  import boto3
  # リクエストボディからJSONデータを取得
  # body_json = json.loads(request.event['body'])  # 通常の場合
  body_json = json.loads(base64.b64decode(request.event['body']).decode())  # binary media typeの場合
  file_name = body_json.get('fileName')
  logger.info(f"file_name: {file_name}")
  file_type = body_json.get('fileType')
  logger.info(f"file_type: {file_type}")
  base64_data = body_json.get('data')
  # Base64データをデコード
  image_data = base64.b64decode(base64_data)
  # ファイル名をランダムに生成
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  new_file_name = "image-" + ''.join(random.choices(chars, k=16)) + "." + file_type.split('/')[-1]
  logger.info(f"new_file_name: {new_file_name}")
  # S3に保存するファイル名を設定（例: ファイル名にランダムなIDを追加してユニークにする）
  bucket_name = settings.AWS["S3"]["bucket"]
  # S3にアップロード
  s3_client = boto3.client('s3')
  s3_client.put_object(
      Bucket=bucket_name,
      Key=os.path.join(f"had/storage/{username}", new_file_name), 
      Body=image_data,
      ContentType=file_type  # MIMEタイプを指定
  )
  logger.info(f"successed to upload to S3")
  return json_render(request, {"url": os.path.join("/storage", username, new_file_name)})

def post_test(request):
  logger.info(f"TEST LOG")
  logger.info(f"event class: {request.event.__class__}")
  logger.info(f"event: {request.event}")
  logger.info(f"body class: {request.event['body'].__class__}")
  logger.info(f"body: {request.event['body']}")
  logger.info(f"body encode: {base64.b64decode(request.event['body']).decode()}")
  # raise Exception("TEST")
  # リクエストボディからJSONデータを取得
  # body_json = json.loads(request.event['body'])
  # file_name = body_json.get('fileName')
  # logger.info(f"file_name: {file_name}")
  # file_type = body_json.get('fileType')
  # logger.info(f"file_type: {file_type}")
  # base64_data = body_json.get('data')
  # S3バケットにアップロード
  import boto3
  s3 = boto3.client('s3')
  bucket_name = settings.AWS["S3"]["bucket"]
  s3.put_object(
    Bucket=bucket_name, 
    Key=os.path.join("had/test2", f"event-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.json"), 
    Body=json.dumps(request.event, indent=2),
  )
  # s3_client.put_object(
  #   Bucket=bucket_name,
  #   Key=os.path.join("had/test2", f"image-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}."+file_type.split('/')[-1]), 
  #   Body=image_data,
  #   ContentType=file_type  # MIMEタイプを指定
  # )
  return json_render(request, {"url": "hoge/hoge"})
#   return error_render(request, f"""\
# request.event.__class__ : {request.event.__class__}
# request.event: {request.event}
# """

